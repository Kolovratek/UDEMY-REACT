{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/milan/UDEMY-REACT/Nextjs-second-project/pages/[meetupId]/index.js\";\nimport { MongoClient, ObjectId } from \"mongodb\";\nimport MeetupDetail from \"../../components/meetups/MeetupDetail\";\n\nconst MeetupDetails = props => {\n  return /*#__PURE__*/_jsxDEV(MeetupDetail, {\n    image: props.meetupData.image,\n    title: props.meetupData.title,\n    address: props.meetupData.address,\n    description: props.meetupData.description\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 6,\n    columnNumber: 5\n  }, this);\n};\n\nexport async function getStaticPaths() {\n  const uri = \"mongodb+srv://stonks159:rgRQ1ScKb1a5Kodi@firstmongodb.aas5yex.mongodb.net/?retryWrites=true&w=majority\";\n  const client = await MongoClient.connect(uri);\n  const collection = client.db(\"meetup\").collection(\"meetups\");\n  const meetups = await collection.find({}, {\n    _id: 1\n  }).toArray();\n  client.close();\n  return {\n    fallback: false,\n    paths: meetups.map(meetup => ({\n      params: {\n        meetupId: meetup._id.toString()\n      }\n    }))\n  };\n}\nexport async function getStaticProps(context) {\n  const meetupId = context.params.meetupId;\n  const uri = \"mongodb+srv://stonks159:rgRQ1ScKb1a5Kodi@firstmongodb.aas5yex.mongodb.net/?retryWrites=true&w=majority\";\n  const client = await MongoClient.connect(uri);\n  const collection = client.db(\"meetup\").collection(\"meetups\");\n  const selectedMeetup = await collection.findOne({\n    _id: ObjectId(meetupId)\n  });\n  client.close();\n  return {\n    props: {\n      meetupData: {\n        id: selectedMeetup._id.toString(),\n        id: selectedMeetup.title,\n        id: selectedMeetup.address,\n        id: selectedMeetup._id\n      }\n    }\n  };\n}\nexport default MeetupDetails;","map":{"version":3,"sources":["/home/milan/UDEMY-REACT/Nextjs-second-project/pages/[meetupId]/index.js"],"names":["MongoClient","ObjectId","MeetupDetail","MeetupDetails","props","meetupData","image","title","address","description","getStaticPaths","uri","client","connect","collection","db","meetups","find","_id","toArray","close","fallback","paths","map","meetup","params","meetupId","toString","getStaticProps","context","selectedMeetup","findOne","id"],"mappings":";;AAAA,SAASA,WAAT,EAAsBC,QAAtB,QAAsC,SAAtC;AACA,OAAOC,YAAP,MAAyB,uCAAzB;;AAEA,MAAMC,aAAa,GAAIC,KAAD,IAAW;AAC/B,sBACE,QAAC,YAAD;AACE,IAAA,KAAK,EAAEA,KAAK,CAACC,UAAN,CAAiBC,KAD1B;AAEE,IAAA,KAAK,EAAEF,KAAK,CAACC,UAAN,CAAiBE,KAF1B;AAGE,IAAA,OAAO,EAAEH,KAAK,CAACC,UAAN,CAAiBG,OAH5B;AAIE,IAAA,WAAW,EAAEJ,KAAK,CAACC,UAAN,CAAiBI;AAJhC;AAAA;AAAA;AAAA;AAAA,UADF;AAQD,CATD;;AAWA,OAAO,eAAeC,cAAf,GAAgC;AACrC,QAAMC,GAAG,GACP,wGADF;AAGA,QAAMC,MAAM,GAAG,MAAMZ,WAAW,CAACa,OAAZ,CAAoBF,GAApB,CAArB;AAEA,QAAMG,UAAU,GAAGF,MAAM,CAACG,EAAP,CAAU,QAAV,EAAoBD,UAApB,CAA+B,SAA/B,CAAnB;AAEA,QAAME,OAAO,GAAG,MAAMF,UAAU,CAACG,IAAX,CAAgB,EAAhB,EAAoB;AAAEC,IAAAA,GAAG,EAAE;AAAP,GAApB,EAAgCC,OAAhC,EAAtB;AAEAP,EAAAA,MAAM,CAACQ,KAAP;AAEA,SAAO;AACLC,IAAAA,QAAQ,EAAE,KADL;AAELC,IAAAA,KAAK,EAAEN,OAAO,CAACO,GAAR,CAAaC,MAAD,KAAa;AAC9BC,MAAAA,MAAM,EAAE;AAAEC,QAAAA,QAAQ,EAAEF,MAAM,CAACN,GAAP,CAAWS,QAAX;AAAZ;AADsB,KAAb,CAAZ;AAFF,GAAP;AAMD;AAED,OAAO,eAAeC,cAAf,CAA8BC,OAA9B,EAAuC;AAC5C,QAAMH,QAAQ,GAAGG,OAAO,CAACJ,MAAR,CAAeC,QAAhC;AACA,QAAMf,GAAG,GACP,wGADF;AAGA,QAAMC,MAAM,GAAG,MAAMZ,WAAW,CAACa,OAAZ,CAAoBF,GAApB,CAArB;AAEA,QAAMG,UAAU,GAAGF,MAAM,CAACG,EAAP,CAAU,QAAV,EAAoBD,UAApB,CAA+B,SAA/B,CAAnB;AAEA,QAAMgB,cAAc,GAAG,MAAMhB,UAAU,CAACiB,OAAX,CAAmB;AAAEb,IAAAA,GAAG,EAAEjB,QAAQ,CAACyB,QAAD;AAAf,GAAnB,CAA7B;AAEAd,EAAAA,MAAM,CAACQ,KAAP;AAEA,SAAO;AACLhB,IAAAA,KAAK,EAAE;AACLC,MAAAA,UAAU,EAAE;AACV2B,QAAAA,EAAE,EAAEF,cAAc,CAACZ,GAAf,CAAmBS,QAAnB,EADM;AAEVK,QAAAA,EAAE,EAAEF,cAAc,CAACvB,KAFT;AAGVyB,QAAAA,EAAE,EAAEF,cAAc,CAACtB,OAHT;AAIVwB,QAAAA,EAAE,EAAEF,cAAc,CAACZ;AAJT;AADP;AADF,GAAP;AAUD;AAED,eAAef,aAAf","sourcesContent":["import { MongoClient, ObjectId } from \"mongodb\";\nimport MeetupDetail from \"../../components/meetups/MeetupDetail\";\n\nconst MeetupDetails = (props) => {\n  return (\n    <MeetupDetail\n      image={props.meetupData.image}\n      title={props.meetupData.title}\n      address={props.meetupData.address}\n      description={props.meetupData.description}\n    />\n  );\n};\n\nexport async function getStaticPaths() {\n  const uri =\n    \"mongodb+srv://stonks159:rgRQ1ScKb1a5Kodi@firstmongodb.aas5yex.mongodb.net/?retryWrites=true&w=majority\";\n\n  const client = await MongoClient.connect(uri);\n\n  const collection = client.db(\"meetup\").collection(\"meetups\");\n\n  const meetups = await collection.find({}, { _id: 1 }).toArray();\n\n  client.close();\n\n  return {\n    fallback: false,\n    paths: meetups.map((meetup) => ({\n      params: { meetupId: meetup._id.toString() },\n    })),\n  };\n}\n\nexport async function getStaticProps(context) {\n  const meetupId = context.params.meetupId;\n  const uri =\n    \"mongodb+srv://stonks159:rgRQ1ScKb1a5Kodi@firstmongodb.aas5yex.mongodb.net/?retryWrites=true&w=majority\";\n\n  const client = await MongoClient.connect(uri);\n\n  const collection = client.db(\"meetup\").collection(\"meetups\");\n\n  const selectedMeetup = await collection.findOne({ _id: ObjectId(meetupId) });\n\n  client.close();\n\n  return {\n    props: {\n      meetupData: {\n        id: selectedMeetup._id.toString(),\n        id: selectedMeetup.title,\n        id: selectedMeetup.address,\n        id: selectedMeetup._id,\n      },\n    },\n  };\n}\n\nexport default MeetupDetails;\n"]},"metadata":{},"sourceType":"module"}